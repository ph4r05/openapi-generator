{{>licenseInfo}}
package {{apiPackage}}

{{#imports}}import {{import}}
{{/imports}}

{{^doNotUseRxAndCoroutines}}
{{#useCoroutines}}
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.toList
{{/useCoroutines}}
{{/doNotUseRxAndCoroutines}}
import {{packageName}}.infrastructure.ApiClient
import {{packageName}}.infrastructure.BlockfrostConfig
import {{packageName}}.infrastructure.ClientException
import {{packageName}}.infrastructure.ClientError
import {{packageName}}.infrastructure.ServerException
import {{packageName}}.infrastructure.ServerError
import {{packageName}}.infrastructure.MultiValueMap
import {{packageName}}.infrastructure.PageLister
import {{packageName}}.infrastructure.RequestConfig
import {{packageName}}.infrastructure.RequestMethod
import {{packageName}}.infrastructure.ResponseType
import {{packageName}}.infrastructure.SortOrder
import {{packageName}}.infrastructure.Success
import {{packageName}}.infrastructure.toMultiValue

import {{packageName}}.retrofit.{{classname}} as {{classname}}Retrofit

{{#operations}}
{{#nonPublicApi}}internal {{/nonPublicApi}}{{^nonPublicApi}}open {{/nonPublicApi}}class {{classname}}(config: BlockfrostConfig = BlockfrostConfig.defaultConfig) : ApiClient(config) {
    val api by lazy {
        createService({{classname}}Retrofit::class.java)
    }

    {{#operation}}
    /**
     * {{summary}}
     * {{notes}}
     {{#allParams}}* @param {{{paramName}}} {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
     {{/allParams}}* @return {{#returnType}}{{{returnType}}}{{#nullableReturnType}} or null{{/nullableReturnType}}{{/returnType}}{{^returnType}}void{{/returnType}}
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    {{#isDeprecated}}
    @Deprecated(message = "This operation is deprecated.")
    {{/isDeprecated}}
    open {{^doNotUseRxAndCoroutines}}{{#useCoroutines}}suspend {{/useCoroutines}}{{/doNotUseRxAndCoroutines}}fun {{operationId}}(
    {{#allParams}}{{{paramName}}}: {{{dataType}}}{{^required}}?{{#defaultValue}} = {{.}}{{/defaultValue}}{{^defaultValue}} = null{{/defaultValue}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}
    ) : {{#returnType}}{{{returnType}}}{{#nullableReturnType}}?{{/nullableReturnType}}{{#vendorExtensions.x-return-is-nonnullnonlist}}?{{/vendorExtensions.x-return-is-nonnullnonlist}}{{/returnType}}{{^returnType}}Unit{{/returnType}}{{^doNotUseRxAndCoroutines}}{{#useCoroutines}} = withContext(Dispatchers.IO){{/useCoroutines}}{{/doNotUseRxAndCoroutines}} {
        {{#isDeprecated}}
        @Suppress("DEPRECATION")
        {{/isDeprecated}}
        {{#vendorExtensions.x-has-list-return}}handleListResponse{{/vendorExtensions.x-has-list-return}}{{^vendorExtensions.x-has-list-return}}handleResponse{{/vendorExtensions.x-has-list-return}}(api.{{operationId}}({{#allParams}}{{{paramName}}} = {{vendorExtensions.x-param-call}}{{^-last}}, {{/-last}}{{/allParams}}))
    }
    {{#vendorExtensions.x-has-paging}}

    /**
    {{#summary}}
     * {{{.}}}. Fetches all paged records, returns a Flow.{{/summary}}
     * {{notes}}
     {{#vendorExtensions.x-nopaging-params}}* parameter {{paramName}}: ({{#isFormParam}}form{{/isFormParam}}{{#isQueryParam}}query{{/isQueryParam}}{{#isPathParam}}path{{/isPathParam}}{{#isHeaderParam}}header{{/isHeaderParam}}{{#isBodyParam}}body{{/isBodyParam}}) {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
     {{/vendorExtensions.x-nopaging-params}}* parameter batchSize: Number of concurrent requests for page download. If null, config.batchSize is used.
     * @return {{#returnType}}Flow<{{{returnType}}}{{#nullableReturnType}} or null{{/nullableReturnType}}{{/returnType}}>{{^returnType}}void{{/returnType}}
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class, PageListerException::class)
    open suspend fun {{operationId}}All({{#vendorExtensions.x-paging-hasParams}}
    {{/vendorExtensions.x-paging-hasParams}}{{#vendorExtensions.x-nopaging-params}}{{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{datatypeWithEnum}}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}? = null{{/required}}{{^-last}}, {{/-last}}{{/vendorExtensions.x-nopaging-params}}{{#vendorExtensions.x-paging-hasParams}},
    {{/vendorExtensions.x-paging-hasParams}}batchSize: Int? = null,
    ) : Flow<{{{vendorExtensions.x-paging-return}}}{{^vendorExtensions.x-paging-return}}Void{{/vendorExtensions.x-paging-return}}> {
        val pager = PageLister<{{{vendorExtensions.x-paging-return}}}{{^vendorExtensions.x-paging-return}}Void{{/vendorExtensions.x-paging-return}}>(concurrentPages = batchSize ?: config.batchSize)
        return pager.load { count, page ->
            {{operationId}}({{#allParams}}{{paramName}} = {{paramName}}{{^-last}}, {{/-last}}{{/allParams}})
        }
    }

    /**
     {{#summary}}
     * {{{.}}}. Fetches all paged records, returns as a list.{{/summary}}
     * {{notes}}
     {{#vendorExtensions.x-nopaging-params}}* parameter {{paramName}}: ({{#isFormParam}}form{{/isFormParam}}{{#isQueryParam}}query{{/isQueryParam}}{{#isPathParam}}path{{/isPathParam}}{{#isHeaderParam}}header{{/isHeaderParam}}{{#isBodyParam}}body{{/isBodyParam}}) {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
     {{/vendorExtensions.x-nopaging-params}}* parameter batchSize: Number of concurrent requests for page download. If null, config.batchSize is used.
     * @return {{#returnType}}List<{{{returnType}}}{{#nullableReturnType}} or null{{/nullableReturnType}}{{/returnType}}>{{^returnType}}void{{/returnType}}
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class, PageListerException::class)
    open suspend fun {{operationId}}AllList({{#vendorExtensions.x-paging-hasParams}}
    {{/vendorExtensions.x-paging-hasParams}}{{#vendorExtensions.x-nopaging-params}}{{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{datatypeWithEnum}}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}? = null{{/required}}{{^-last}}, {{/-last}}{{/vendorExtensions.x-nopaging-params}}{{#vendorExtensions.x-paging-hasParams}},
    {{/vendorExtensions.x-paging-hasParams}}batchSize: Int? = null,
    ) : List<{{{vendorExtensions.x-paging-return}}}{{^vendorExtensions.x-paging-return}}Void{{/vendorExtensions.x-paging-return}}> {
        return {{operationId}}All({{#vendorExtensions.x-nopaging-params}}{{paramName}} = {{paramName}}{{^-last}}, {{/-last}}{{/vendorExtensions.x-nopaging-params}}{{#vendorExtensions.x-nopaging-params-nonempty}}, {{/vendorExtensions.x-nopaging-params-nonempty}}batchSize = batchSize).toList()
    }
    {{/vendorExtensions.x-has-paging}}

    {{/operation}}
}
{{/operations}}
